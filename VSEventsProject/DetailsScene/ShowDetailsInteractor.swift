//
//  ShowDetailsInteractor.swift
//  VSEventsProject
//
//  Created by Virgilius Santos on 16/11/18.
//  Copyright (c) 2018 Virgilius Santos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowDetailsBusinessLogic {
    func fetchDetail()
    func postCheckIn(userInfo: (String, String)?)
}

protocol ShowDetailsDataStore {
    var event: Event? { get set }
}

class ShowDetailsInteractor: ShowDetailsDataStore {
    var presenter: ShowDetailsPresentationLogic?
    var eventAPI: DetailAPIProtocol?
    var event: Event?

}

extension ShowDetailsInteractor: ShowDetailsBusinessLogic {
    func fetchDetail() {
        eventAPI?.fetch(source: event!) { [weak self] (result: Result<Event, Error>) in
            guard let self else { return }
            switch result {
            case .success(let evt):
                presenter?.presentDetail(.success(evt))
            case .error(let error):
                sendDetailMessage(msg: error.localizedDescription)
            }
        }
    }
    
    private func sendDetailMessage(msg: String) {
        let buttonAlert = SingleButtonAlert(
            title: "Detalhes",
            message: msg,
            action: AlertAction(buttonTitle: "OK")
        )
        self.presenter?.presentDetail(.error(buttonAlert))
    }

    func postCheckIn(userInfo: (String, String)?) {
        guard let (name, email) = userInfo else {
            self.sendCheckInMessage(msg: "dados invalidos")
            return
        }
        guard email.match(.email) else {
            self.sendCheckInMessage(msg: "email no formato invalido, tente novamente.")
            return
        }
        
        let user = User(name: name, email: email, eventId: event!.id)
        eventAPI?.checkIn(source: user) { result in
            if case .success(let dict) = result, (dict["code"] as? String) == "200" {
                self.sendCheckInMessage(msg: "Sucesso!")
            } else {
                self.sendCheckInMessage(msg: "Houve uma falha, tente novamente mais tarte.")
            }
        }
    }

    private func sendCheckInMessage(msg: String) {
        let buttonAlert = SingleButtonAlert(
            title: "Check In",
            message: msg,
            action: AlertAction(buttonTitle: "OK")
        )
        self.presenter?.presentCheckIn(buttonAlert)
    }
}
